package repository

import (
	"context"
	"log"

	"github.com/xlund/tracker/internal/domain"
)

type postgresGameRepository struct {
	conn Connection
}

func NewPostgresGame(conn Connection) domain.GameRepository {
	return &postgresGameRepository{conn: conn}
}

func (r *postgresGameRepository) fetch(ctx context.Context, query string, args ...interface{}) ([]domain.Game, error) {
	rows, err := r.conn.Query(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var gg []domain.Game
	for rows.Next() {
		var g domain.Game
		if err := rows.Scan(&g.ID, &g.Users.ID, &g.Status, &g.Winner, &g.Users.White.ID, &g.Users.Black.ID, &g.Users.White.Username, &g.Users.Black.Username, &g.Users.White.Name, &g.Users.Black.Name); err != nil {
			return nil, err
		}
		gg = append(gg, g)
	}
	return gg, nil
}

func (r *postgresGameRepository) fetchWithUsernames(ctx context.Context, query string, args ...interface{}) ([]domain.Game, error) {
	rows, err := r.conn.Query(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var gg []domain.Game
	for rows.Next() {
		var g domain.Game
		if err := rows.Scan(&g.ID, &g.Users.White.ID, &g.Users.White.Username, &g.Users.White.Name, &g.Users.Black.ID, &g.Users.Black.Username, &g.Users.Black.Name); err != nil {
			return nil, err
		}
		gg = append(gg, g)
	}
	return gg, nil
}

func (r *postgresGameRepository) GetById(ctx context.Context, id int) (domain.Game, error) {
	query := `
		SELECT id
		FROM games
		WHERE id = $1`

	gg, err := r.fetch(ctx, query, id)
	if err != nil {
		return domain.Game{}, err
	}
	if len(gg) == 0 {
		return domain.Game{}, domain.ErrNotFound
	}

	return gg[0], nil

}

func (r *postgresGameRepository) GetAll(ctx context.Context) ([]domain.Game, error) {

	query := `
	SELECT g.id, g.Users,  g.status,  g.winner,
	COALESCE(gp.white , 'removed') AS white_player, COALESCE(gp.black, 'removed') AS black_player , COALESCE(wp.username, 'removed') AS white_username, COALESCE(bp.username, 'removed') AS black_username, COALESCE(wp.name, 'removed') AS white_name, COALESCE(bp.name, 'removed') AS black_name
FROM games g
LEFT JOIN game_Users gp ON g.Users = gp.id
LEFT JOIN users wp ON gp.white = wp.id
LEFT JOIN users bp ON gp.black = bp.id
		`
	rows, err := r.conn.Query(ctx, query)
	if err != nil {
		log.Default().Printf("Game Repository GetAll Error: %v", err)
		return nil, err
	}
	defer rows.Close()

	var gg []domain.Game
	for rows.Next() {
		var g domain.Game
		if err := rows.Scan(&g.ID, &g.Users.ID, &g.Status, &g.Winner, &g.Users.White.ID, &g.Users.Black.ID, &g.Users.White.Username, &g.Users.Black.Username, &g.Users.White.Name, &g.Users.Black.Name); err != nil {
			log.Default().Printf("Game Repository GetAll Error: %v", err)
			return nil, err
		}
		gg = append(gg, g)
	}
	return gg, nil
}

func (r *postgresGameRepository) CreateOrUpdate(ctx context.Context, g *domain.Game) error {
	// if err := g.Validate(); err != nil {
	// 	return err
	// }
	// Id is generated by the database
	var Users_id int
	Users_id_query := `INSERT INTO game_Users (white, black) VALUES ($1, $2) RETURNING id;`
	games_query := `
		INSERT INTO games (id, Users,  status, variant, winner) VALUES ($1, $2, $3, $4, $5 )
		RETURNING id;
		`

	err := r.conn.QueryRow(ctx, Users_id_query, g.Users.White.ID, g.Users.Black.ID).Scan(&Users_id)
	if err != nil {
		return err
	}
	err = r.conn.QueryRow(ctx, games_query, g.ID, Users_id, g.Status, g.Variant, g.Winner).Scan(&g.ID)
	return err
}

func (r *postgresGameRepository) Delete(ctx context.Context, id string) error {
	query := `DELETE FROM games WHERE id = $1`
	_, err := r.conn.Exec(ctx, query, id)
	return err
}
