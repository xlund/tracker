package repository

import (
	"context"

	"github.com/xlund/tracker/internal/domain"
)

type postgresGameRepository struct {
	conn Connection
}

func NewPostgresGame(conn Connection) domain.GameRepository {
	return &postgresGameRepository{conn: conn}
}

func (r *postgresGameRepository) fetch(ctx context.Context, query string, args ...interface{}) ([]domain.Game, error) {
	rows, err := r.conn.Query(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var gg []domain.Game
	for rows.Next() {
		var g domain.Game
		if err := rows.Scan(&g.ID); err != nil {
			return nil, err
		}
		gg = append(gg, g)
	}
	return gg, nil
}

func (r *postgresGameRepository) GetById(ctx context.Context, id int) (domain.Game, error) {
	query := `
		SELECT id
		FROM games
		WHERE id = $1`

	gg, err := r.fetch(ctx, query, id)
	if err != nil {
		return domain.Game{}, err
	}
	if len(gg) == 0 {
		return domain.Game{}, domain.ErrNotFound
	}

	return gg[0], nil

}

func (r *postgresGameRepository) CreateOrUpdate(ctx context.Context, g *domain.Game) error {
	// if err := g.Validate(); err != nil {
	// 	return err
	// }
	// Id is generated by the database
	var players_id int
	players_id_query := `INSERT INTO game_players (white, black) VALUES ($1, $2) RETURNING id;`
	games_query := `
		INSERT INTO games (id, players, source, status, variant, winner) VALUES ($1, $2, $3, $4, $5, $6)
		RETURNING id;
		`

	err := r.conn.QueryRow(ctx, players_id_query, g.Players.White.ID, g.Players.Black.ID).Scan(&players_id)
	if err != nil {
		return err
	}
	err = r.conn.QueryRow(ctx, games_query, g.ID, players_id, g.Source, g.Status, g.Variant, g.Winner).Scan(&g.ID)
	return err
}

func (r *postgresGameRepository) Delete(ctx context.Context, id string) error {
	query := `DELETE FROM games WHERE id = $1`
	_, err := r.conn.Exec(ctx, query, id)
	return err
}
